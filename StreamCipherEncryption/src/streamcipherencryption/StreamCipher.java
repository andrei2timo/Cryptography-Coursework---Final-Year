/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package streamcipherencryption;

import java.io.IOException;
import java.util.Random;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import static streamcipherencryption.StreamCipherEncryption.Decrypt;
import static streamcipherencryption.StreamCipherEncryption.HexToBinary;
import static streamcipherencryption.StreamCipherEncryption.Hide_Message;
import static streamcipherencryption.StreamCipherEncryption.StreamCipher;
import static streamcipherencryption.StreamCipherEncryption.convertHexToString;

/**
 *
 * @author suvit
 */
public class StreamCipher extends javax.swing.JFrame {

    String Key = "";
    String message2;
    String message1="";
    public StreamCipher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Message2:");

        jLabel1.setText("Key:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("a73e80e2b563");

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("The message in hex is:");

        jLabel4.setText("The message after encryption is:");

        jLabel5.setText("Original message with hidden message:");

        jScrollPane2.setViewportView(jTextPane1);

        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField2))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Method StreamCipher - help to Encrypt/Decrypt the Data
    public static long StreamCipher(String Message, String Key)
    {   
        /*
        int[] output = new int[Message.length()];
        String result = "";
        for(int i = 0; i < Message.length(); i++) 
        {   
            int d1= Integer.valueOf(Message.charAt(i));
            int d2= Integer.valueOf(Key.charAt(i));
            //System.out.println(d1 + " " + d2);
            int o = d1 ^ d2;
            output[i] = o;
        }
        result = Arrays.toString(output);
        return output;
        */
        //Convert both strings to long numbers
        long a = Long.parseLong(Message, 16);
        long b = Long.parseLong(Key,16);
        //Perform and return XOR as a long number
        return a ^ b;
    }
    //Method convertStringToHex - converts a string number to a Hexadecimal number
    private static String convertStringToHex(String str) 
    {   
        //create a new string to store the value, step-by-step
        StringBuilder stringBuilder = new StringBuilder();
        //Break the string into a char string to go through it a for-loop
        char[] charArray = str.toCharArray();

        for (char c : charArray) 
        {   
            //Convert the character to a hex number
            String charToHex = Integer.toHexString(c);
            //Append the character to a new string
            stringBuilder.append(charToHex);
        }
        return stringBuilder.toString();
    }
    
    //Method HexToBinary - convert a hex number into binary
    public static String HexToBinary(long num)
    {
        String binary = Long.toBinaryString(num);
        return binary;
    }
    //Method convertHexToString - converts a Hex number back to String (for Decryption)
    public static String convertHexToString(String str)
    {  
       //create a new string to store the value, step-by-step
       StringBuilder stringBuilder = new StringBuilder("");
       for(int i=0;i<str.length();i=i+2)//go through the string
       {
           String s = str.substring(i,i+2);//Take a substring of 2 characters from the string
           //Convert the substring to string and append it to the new string
           stringBuilder.append((char) Integer.parseInt(s,16));
       }
        return stringBuilder.toString();
    }
    //Method Hide_Message - this method represents the Steganography part of the assignment
    public static String Hide_Message(String Original_Message, String Encrypted_Message)
    {   
        //add fullstop at the end of original message
        Original_Message += ".";
        Random rand = new Random(); //instance of random class
        //Convert secret message to form of "*" + white space
        for(int i=0;i<Encrypted_Message.length();i++)
        {   
            int int_random = rand.nextInt(Original_Message.length());
            // white space indicate "0"
            if(Encrypted_Message.charAt(i) == '0')
                Original_Message = Original_Message.substring(0,int_random) + '*' + Original_Message.substring(int_random);  
            else if(Encrypted_Message.charAt(i) == '1')
                Original_Message = Original_Message.substring(0,int_random) + ',' + Original_Message.substring(int_random); 
        }      
        return Original_Message;
    }
    //Method Decrypt - this method represents the Steganography part of the assignment
    //Remove the secret message from the message and store it 
    public static String Decrypt(String Encrypted_Message, String message1)
    {   
        //to build the binary set
        String binary="";
        //Convert secret message to form of "*" + white space
        for(int i=0;i<Encrypted_Message.length();i++)
        {   
            // white space indicate "0"
            if(Encrypted_Message.charAt(i) == '*')
            {
                //Delete '*' from position i
                Encrypted_Message = Encrypted_Message.substring(0,i) + Encrypted_Message.substring(i+1);
                binary += "0";
                //In case we have 2 stars together, we need to go back one position
                i--;
            }  
            if(Encrypted_Message.charAt(i) == ',')
            {   
                //Delete ',' from position i
                binary+="1";
                Encrypted_Message = Encrypted_Message.substring(0,i) + Encrypted_Message.substring(i+1);
                //In case we have 2 commas together, we need to go back one position
                i--;
            }
        }
        //Make a copy of the decrypted message to display it on the GUI
        message1=String.valueOf(Encrypted_Message);
        return binary;
    }
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        String Key = "a73e80e2b563";
        jTextField2.setText(Key);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        Path fileName = Path.of("C:\\Users\\suvit\\Desktop\\3rd Year\\Cryptography\\Week6\\StreamCipherEncryption\\src\\streamcipherencryption\\data.txt");
        try {
            // Now calling Files.readString() method to
            // read the file
            message1 = Files.readString(fileName);
        } catch (IOException ex) {
            Logger.getLogger(StreamCipher.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Printing the string
        System.out.println(message1);
        
        
        message2 = jTextField1.getText();
        Key = jTextField2.getText();
        jTextField2.setText(Key);
        System.out.println(message2);
        message2 = convertStringToHex(message2);
        //Display the converted message into hex and key onto screen
        
        long result = StreamCipher(message2,Key);
        jTextField3.setText("The encrypted message is: " + Long.toHexString(result));
       
        System.out.println(message2);
        
        //Encrypt the message using the key
        jTextField4.setText(message2);
        System.out.println(Long.toHexString(result));
        
        //The encrypted text displayed and generating the cipher-text

        jTextPane1.setText(Hide_Message(message1,HexToBinary(result)));
        //System.out.println(Hide_Message(message1,HexToBinary(result)));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String CipherText = jTextPane1.getText();
        System.out.println(CipherText);
        
        jLabel2.setText("");
        jLabel2.setText("The Key is: ");

        jTextField4.setText("");
        jTextField4.setText(Key);
        
        long result = StreamCipher(message2,Key);
        System.out.println(Decrypt(Hide_Message(message1,HexToBinary(result)),message1));
        
        long decryption_message2 = StreamCipher(Long.toHexString(result),Key);
        jLabel4.setText("");
        jLabel4.setText("The decrypted message is: ");
        
        String ForDecryption = Long.toHexString(decryption_message2);
        
        jTextField3.setText("");
        jTextField3.setText(convertHexToString(ForDecryption));
        
        System.out.println(message1);
        jLabel5.setText("");
        jLabel5.setText("Original message after decryption:");
        
        jTextPane1.setText(message1);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StreamCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StreamCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StreamCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StreamCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StreamCipher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
